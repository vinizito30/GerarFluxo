function qGerarFluxoFinanceiro() {
  var sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
  var range = sheet.getDataRange();
  var values = range.getValues();
  var fontWeights = range.getFontWeights(); // Obtém os pesos das fontes
  var backgrounds = range.getBackgrounds(); // Obtém as cores de fundo das células

  Logger.log('Obtendo intervalos nomeados...');
  var namedRanges = SpreadsheetApp.getActiveSpreadsheet().getNamedRanges();
  var intervalos = {};

  // Mapeia os intervalos nomeados para um objeto
  namedRanges.forEach(function(namedRange) {
    intervalos[namedRange.getName()] = namedRange.getRange();
  });

  var intervaloIniciar = intervalos['INICIAR'];
  var intervaloParar = intervalos['PARAR'];

  if (!intervaloIniciar || !intervaloParar) {
    var msg = !intervaloIniciar ? 'Intervalo nomeado "INICIAR" não encontrado.' : 'Intervalo nomeado "PARAR" não encontrado.';
    Logger.log(msg);
    Browser.msgBox(msg);
    return;
  }

  var colunaIniciar = intervaloIniciar.getColumn() - 1;
  var linhaInicial = intervaloIniciar.getRow() + 2;
  var linhaParar = intervaloParar.getRow();
  var numColunas = sheet.getMaxColumns();

  Logger.log('Iniciando o processamento das linhas de ' + linhaInicial + ' a ' + linhaParar);

  var tempoInicio = new Date().getTime();

  for (var linhaAtual = linhaParar; linhaAtual >= linhaInicial; linhaAtual--) {
    if (sheet.isRowHiddenByUser(linhaAtual) || sheet.isRowHiddenByFilter(linhaAtual)) {
      Logger.log('Linha ' + linhaAtual + ' está oculta ou filtrada. Pulando.');
      continue;
    }

    var valorReferencia = values[linhaAtual - 1][colunaIniciar];
    if (valorReferencia === 0) {
      Logger.log('Valor de referência é 0. Pulando linha.');
      continue;
    }

    var colunaAtual = colunaIniciar + 1;
    var primeiraColunaNegrito = -1;
    var ultimaColunaDiferenca = -1;
    var ultimaColunaNegrito = -1;
    var primeiraColunaZero = -1;
    var ultimaColunaZero = -1;
    var diferencas = [];
    var valoresNegrito = [];
    var sequenciasZeros = [];
    var backgroundsNovaLinha = Array(numColunas).fill(''); // Cores de fundo para a nova linha
    var ultimoValorColuna = -1; // Armazena a coluna do último valor inserido
    var ultimaColunaPreenchidaNova = -1; // Armazena a última coluna preenchida na nova linha

    // Armazena todos os números da linha original e determina a última coluna preenchida
    while (colunaAtual < values[linhaAtual - 1].length) {
      var valorAtual = values[linhaAtual - 1][colunaAtual];
      var isNegrito = fontWeights[linhaAtual - 1][colunaAtual] === 'bold';

      if (valorAtual === '') {
        Logger.log('Encontrada célula vazia na coluna ' + (colunaAtual + 1) + '. Parando.');
        break;
      }

      if (valorAtual === 0) {
        if (primeiraColunaZero === -1) {
          primeiraColunaZero = colunaAtual; // Registra a primeira coluna com 0
        }
        ultimaColunaZero = colunaAtual; // Atualiza a última coluna com 0
        sequenciasZeros.push(colunaAtual);
        Logger.log('Valor 0 encontrado na coluna ' + (colunaAtual + 1) + '.');
        
        // Captura todos os valores seguintes até a próxima célula vazia
        while (colunaAtual < values[linhaAtual - 1].length && values[linhaAtual - 1][colunaAtual] !== '') {
          sequenciasZeros.push(colunaAtual);
          colunaAtual++;
        }
        ultimoValorColuna = colunaAtual - 1; // Atualiza a coluna do último valor antes da célula vazia
        break; // Sai do loop para processar a sequência de zeros
      }

      if (valorAtual !== valorReferencia && !isNegrito) {
        diferencas.push(colunaAtual);
        ultimaColunaDiferenca = colunaAtual;
        Logger.log('Valor diferente encontrado na coluna ' + (colunaAtual + 1) + '.');
      }

      if (isNegrito) {
        valoresNegrito.push({ coluna: colunaAtual + 1, valor: valorAtual });
        if (primeiraColunaNegrito === -1) {
          primeiraColunaNegrito = colunaAtual;
        }
        ultimaColunaNegrito = colunaAtual;
        Logger.log('Valor em negrito encontrado na coluna ' + (colunaAtual + 1) + ': ' + valorAtual);
      }

      colunaAtual++;
      ultimoValorColuna = colunaAtual - 1; // Atualiza a coluna do último valor significativo
    }

    if (diferencas.length > 0 || valoresNegrito.length > 0 || sequenciasZeros.length > 0) {
      Logger.log('Preparando dados para nova linha abaixo da linha ' + linhaAtual);
      var novaLinha = Array(numColunas).fill('');
      novaLinha[0] = values[linhaAtual - 1][0] + '_1';

      // Adiciona valores de diferença
      for (var i = 1; i <= (ultimaColunaDiferenca >= 0 ? ultimaColunaDiferenca : ultimoValorColuna); i++) {
        if (diferencas.includes(i)) {
          var valorAtual = values[linhaAtual - 1][i];
          var valorDiferenca = Math.max(0, valorAtual - valorReferencia);
          novaLinha[i] = valorDiferenca;
          backgroundsNovaLinha[i] = '#FFFF00'; // Cor de fundo amarelo para células com valor diferente
          Logger.log('Adicionando diferença na coluna ' + (i + 1) + ': ' + valorDiferenca);
        }
      }

      // Adiciona valores de sequência de zeros
      sequenciasZeros.forEach(function(col) {
        novaLinha[col] = values[linhaAtual - 1][col];
        backgroundsNovaLinha[col] = '#FFFF00'; // Cor de fundo amarelo para valores zero
        Logger.log('Adicionando valor da sequência de zeros na coluna ' + (col + 1) + ': ' + values[linhaAtual - 1][col]);
      });

      // Adiciona valores negrito
      valoresNegrito.forEach(function(negrito) {
        novaLinha[negrito.coluna - 1] = negrito.valor;
        backgroundsNovaLinha[negrito.coluna - 1] = '#FFFF00'; // Cor de fundo amarelo para valores negrito
        Logger.log('Valor negrito adicionado na coluna ' + negrito.coluna + ': ' + negrito.valor);
      });

      // Insere uma nova linha e define os valores e cores de fundo imediatamente
      sheet.insertRowAfter(linhaAtual);
      var novaLinhaRange = sheet.getRange(linhaAtual + 1, 1, 1, numColunas);
      novaLinhaRange.setValues([novaLinha]);
      novaLinhaRange.setBackgrounds([backgroundsNovaLinha]);

      // Determina a última coluna preenchida na nova linha
      ultimaColunaPreenchidaNova = novaLinha.reduce(function(maxCol, value, index) {
        return (value !== '' && value !== 0) ? Math.max(maxCol, index) : maxCol;
      }, -1);

      // Preenche com zeros na nova linha da coluna de referência até a última coluna preenchida na nova linha
      if (ultimaColunaPreenchidaNova >= 0) {
        for (var k = colunaIniciar; k <= ultimaColunaPreenchidaNova; k++) {
          if (novaLinha[k] === '') {
            novaLinha[k] = 0;
            Logger.log('Adicionando 0 na coluna ' + (k + 1));
          }
        }
      }

      // Atualiza a nova linha com zeros e valores
      novaLinhaRange.setValues([novaLinha]);
      novaLinhaRange.setBackgrounds([backgroundsNovaLinha]);

      // Copia a formatação da coluna 2 até a coluna 121 da linha original para a nova linha
      var intervaloOrigem = sheet.getRange(linhaAtual, 2, 1, 121); // Linha original da coluna 2 até a coluna 121
      var intervaloDestino = sheet.getRange(linhaAtual + 1, 2, 1, 121); // Nova linha da coluna 2 até a coluna 121
      intervaloOrigem.copyTo(intervaloDestino, { contentsOnly: false }); // Copia tudo, incluindo o conteúdo e a formatação

      // Atualiza o valor da célula original com o valor de referência
      for (var i = colunaIniciar; i <= (ultimaColunaDiferenca >= 0 ? ultimaColunaDiferenca : ultimoValorColuna); i++) {
        if (values[linhaAtual - 1][i] !== valorReferencia) {
          var originalCell = sheet.getRange(linhaAtual, i + 1);
          originalCell.setValue(valorReferencia);
          originalCell.setBackground(''); // Limpa a cor de fundo da célula original
          Logger.log('Atualizando valor da célula original na coluna ' + (i + 1) + ' para o valor de referência: ' + valorReferencia);
        }
      }

      // Apaga o valor das células originais onde tinha o negrito
      valoresNegrito.forEach(function(negrito) {
        sheet.getRange(linhaAtual, negrito.coluna).setValue(''); // Limpa o valor original
        Logger.log('Valor em negrito na coluna ' + negrito.coluna + ' removido da linha original.');
      });

      // Limpa os valores após a sequência de zeros
      sequenciasZeros.forEach(function(col) {
        sheet.getRange(linhaAtual, col + 1).setValue(''); // Limpa o valor original
        Logger.log('Valor após o 0 na coluna ' + (col + 1) + ' removido da linha original.');
      });
    }
  }

  var tempoFim = new Date().getTime();
  var tempoExecucao = (tempoFim - tempoInicio) / 1000;
  var minutos = Math.floor(tempoExecucao / 60);
  var segundos = Math.round(tempoExecucao % 60);

  Logger.log('Tempo de execução: ' + minutos + ' minuto(s) e ' + segundos + ' segundo(s)');
  var htmlOutput = HtmlService.createHtmlOutput(
    '<html>' +
    '<head><base target="_top">' +
    '<style>' +
    'body { font-family: Arial, sans-serif; text-align: center; padding: 20px; }' +
    '.container { display: flex; flex-direction: column; align-items: center; justify-content: center; }' +
    '.image { width: 300px; margin-bottom: 30px; }' +
    '.message { font-size: 16px; margin-bottom: 10px; }' +
    '.time { font-size: 14px; color: #555; margin-bottom: 20px; }' +
    '.button { background-color: #a9a9a9; color: black; border: none; padding: 15px 32px; text-align: center; text-decoration: none; display: inline-block; font-size: 16px; margin: 4px 2px; cursor: pointer; border-radius: 5px; }' +
    '</style>' +
    '</head>' +
    '<body>' +
    '<div class="container">' +
    '<img class="image" src="https://i.imgur.com/1N7brwP.png" alt="Certinho">' +
    '<div class="message">Fluxo anual e mensal segregado com sucesso!</div>' +
    '<div class="time">Tempo de execução: ' + minutos + ' minuto(s) e ' + segundos + ' segundo(s)</div>' +
    '<button class="button" onclick="google.script.host.close()">Estou ciente!</button>' +
    '</div>' +
    '</body>' +
    '</html>'
  ).setWidth(400).setHeight(250);

  SpreadsheetApp.getUi().showSidebar(htmlOutput);
}
