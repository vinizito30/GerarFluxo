function analisarEInserirLinha() {
  var sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
  var range = sheet.getDataRange();
  var values = range.getValues();
  var fontWeights = range.getFontWeights(); // Adiciona a obtenção dos pesos das fontes

  // Obtendo os intervalos nomeados
  var namedRanges = SpreadsheetApp.getActiveSpreadsheet().getNamedRanges();
  var intervaloIniciar, intervaloParar;

  namedRanges.forEach(function(namedRange) {
    if (namedRange.getName() === 'INICIAR') {
      intervaloIniciar = namedRange.getRange();
    } else if (namedRange.getName() === 'PARAR') {
      intervaloParar = namedRange.getRange();
    }
  });

  if (!intervaloIniciar) {
    Browser.msgBox('Intervalo nomeado "INICIAR" não encontrado.');
    return;
  }

  if (!intervaloParar) {
    Browser.msgBox('Intervalo nomeado "PARAR" não encontrado.');
    return;
  }

  // Obtendo a coluna de INICIAR e PARAR
  var colunaIniciar = intervaloIniciar.getColumn() - 1; // Ajustar para índice baseado em 0
  var linhaInicial = intervaloIniciar.getRow() + 2; // Começar 2 linhas abaixo do intervalo nomeado INICIAR
  var linhaParar = intervaloParar.getRow(); // Linha onde está o intervalo nomeado PARAR

  // Marcar o início do tempo
  var tempoInicio = new Date().getTime();

  for (var linhaAtual = linhaInicial; linhaAtual <= linhaParar; linhaAtual++) {
    // Verificar se a linha está oculta ou com altura 0
    if (sheet.isRowHiddenByUser(linhaAtual) || sheet.isRowHiddenByFilter(linhaAtual)) {
      continue; // Pular linhas ocultas ou filtradas
    }

    // Atualizar os valores e fontes após possíveis alterações
    // Atualizar apenas após o loop principal
    values = sheet.getDataRange().getValues();
    fontWeights = sheet.getDataRange().getFontWeights(); 

    // Verificar o valor da célula na coluna de referência
    var valorReferencia = values[linhaAtual - 1][colunaIniciar]; // Linha atual na coluna de referência

    if (valorReferencia === 0) {
      continue; // Pular a análise se o valor de referência for 0
    }

    var colunaAtual = colunaIniciar + 1;

    // Dicionário para armazenar as diferenças, valores negrito e zeros
    var diferencas = [];
    var valoresNegrito = [];
    var zeros = [];
    var encontrouZero = false;
    var valoresParaCopiar = [];

    while (colunaAtual < values[linhaAtual - 1].length) {
      var valorAtual = values[linhaAtual - 1][colunaAtual];
      var isNegrito = fontWeights[linhaAtual - 1][colunaAtual] === 'bold'; // Verifica se o texto está em negrito
      
      if (valorAtual === '') {
        // Parar se encontrar a primeira célula vazia
        break;
      }

      if (valorAtual === 0) {
        encontrouZero = true;
        // Armazenar a posição do 0
        zeros.push(colunaAtual + 1);
        // Copiar valores a partir do próximo item após o 0
        valoresParaCopiar = values[linhaAtual - 1].slice(colunaAtual + 1);
        break;
      }

      if (valorAtual !== valorReferencia && !isNegrito) {
        // Armazenar coluna com valor diferente se não estiver em negrito
        diferencas.push(colunaAtual);
      }

      if (isNegrito) {
        // Armazenar valores negrito
        valoresNegrito.push({ coluna: colunaAtual + 1, valor: valorAtual });
      }
      
      colunaAtual++; // Mover para a próxima coluna
    }

    // Inserir nova linha abaixo
    if (diferencas.length > 0 || encontrouZero || valoresNegrito.length > 0) {
      sheet.insertRowAfter(linhaAtual);
      var novaLinha = linhaAtual + 1;

      // Adicionar o sufixo _1 ao valor da primeira coluna
      var valorPrimeiraColuna = values[linhaAtual - 1][0];
      var valorNovaLinha = valorPrimeiraColuna + '_1';
      
      // Preencher a nova linha com as diferenças, valores negrito e zeros
      var novaLinhaValores = Array(values[0].length).fill(''); // Inicializar com células vazias
      novaLinhaValores[0] = valorNovaLinha;

      if (encontrouZero) {
        // Adicionar zeros nas posições corretas
        zeros.forEach(function(colunaZero) {
          novaLinhaValores[colunaZero - 1] = 0;
        });
        
        // Copiar valores diretamente após o 0
        for (var i = 0; i < valoresParaCopiar.length; i++) {
          novaLinhaValores[colunaAtual + i] = valoresParaCopiar[i];
        }
      }

      // Adicionar diferenças calculadas se não encontrou 0
      if (!encontrouZero) {
        diferencas.forEach(function(colunaDiferenca) {
          var valorAtual = values[linhaAtual - 1][colunaDiferenca];
          // Garantir que o valor da célula nunca seja negativo
          var valorDiferenca = Math.max(0, valorAtual - valorReferencia); // Subtrai e garante que o resultado não seja negativo
          novaLinhaValores[colunaDiferenca] = valorDiferenca;
        });

        // Preencher células vazias com 0 até a célula anterior ao último número diferente
        var ultimaColunaDiferenca = diferencas[diferencas.length - 1]; // Última coluna preenchida
        for (var i = 1; i < ultimaColunaDiferenca; i++) {
          if (novaLinhaValores[i] === '') {
            novaLinhaValores[i] = 0;
          }
        }
      }

      // Adicionar valores negrito na nova linha e limpar os valores originais
      valoresNegrito.forEach(function(negrito) {
        novaLinhaValores[negrito.coluna - 1] = negrito.valor;
        // Limpar a célula original
        sheet.getRange(linhaAtual, negrito.coluna).setValue('');
      });

      // Preencher com 0 entre o último valor diferente e os valores negrito
      var ultimaColunaDiferenca = diferencas.length > 0 ? diferencas[diferencas.length - 1] : -1;
      var primeiraColunaNegrito = valoresNegrito.length > 0 ? valoresNegrito[0].coluna - 1 : -1;
      for (var col = ultimaColunaDiferenca + 1; col < primeiraColunaNegrito; col++) {
        novaLinhaValores[col] = 0;
      }

      // Copiar valores das colunas 2 até a 112 da linha atual para a nova linha
      for (var col = 1; col <= 112; col++) {
        var valor = values[linhaAtual - 1][col];
        if (valor !== undefined) { // Verificar se o valor não é undefined
          novaLinhaValores[col] = valor;
        }
      }

      // Definir os valores da nova linha na planilha
      var novaLinhaRange = sheet.getRange(novaLinha, 1, 1, novaLinhaValores.length);
      novaLinhaRange.setValues([novaLinhaValores]);

      // Definir a cor de fundo das células na nova linha
      var novaLinhaBackgrounds = Array(values[0].length).fill(''); // Inicializar com cor de fundo padrão
      diferencas.forEach(function(colunaDiferenca) {
        novaLinhaBackgrounds[colunaDiferenca] = '#FFFF00'; // Amarelo para células com valor diferente
      });
      valoresNegrito.forEach(function(negrito) {
        novaLinhaBackgrounds[negrito.coluna - 1] = '#FFFF00'; // Amarelo para células com negrito
      });
      novaLinhaRange.setBackgrounds([novaLinhaBackgrounds]);

      // Recolocar o valor da célula de referência nas células com valor diferente, mas não para células em negrito
      diferencas.forEach(function(colunaDiferenca) {
        if (!valoresNegrito.some(negrito => negrito.coluna - 1 === colunaDiferenca)) {
          sheet.getRange(linhaAtual, colunaDiferenca + 1).setValue(valorReferencia);
        }
      });

      // Atualizar o número de linhas após a inserção
      numLinhas = sheet.getDataRange().getValues().length;
      
      // Atualizar a linha atual e os valores
      linhaAtual++;
      // Atualizar valores e fontes após inserção
      values = sheet.getDataRange().getValues();
      fontWeights = sheet.getDataRange().getFontWeights();
    }
  }

  // Marcar o fim do tempo
  var tempoFim = new Date().getTime();
  var tempoExecucao = (tempoFim - tempoInicio) / 1000; // Tempo em segundos
  var minutos = Math.floor(tempoExecucao / 60);
  var segundos = Math.round(tempoExecucao % 60); // Apenas segundos arredondados

  // Criar o HTML com a mensagem e o tempo de execução
  var htmlOutput = HtmlService.createHtmlOutput(
    '<html>' +
    '<head><base target="_top">' +
    '<style>' +
    'body { font-family: Arial, sans-serif; text-align: center; padding: 20px; }' +
    '.container { display: flex; flex-direction: column; align-items: center; justify-content: center; }' +
    '.image { width: 300px; margin-bottom: 30px; }' +
    '.message { font-size: 16px; margin-bottom: 10px; }' +
    '.time { font-size: 14px; color: #555; margin-bottom: 20px; }' +
    '.button { background-color: #a9a9a9; color: black; border: none; padding: 15px 32px; text-align: center; text-decoration: none; display: inline-block; font-size: 16px; margin: 4px 2px; cursor: pointer; border-radius: 5px; }' +
    '</style>' +
    '</head>' +
    '<body>' +
    '<div class="container">' +
    '<img class="image" src="https://i.imgur.com/1N7brwP.png" alt="Certinho">' + // URL da sua imagem
    '<div class="message">Fluxo anual e mensal segregado com sucesso!</div>' +
    '<div class="time">Tempo de execução: ' + minutos + ' minuto(s) e ' + segundos + ' segundo(s)</div>' +
    '<button class="button" onclick="google.script.host.close()">Estou ciente!</button>' +
    '</div>' +
    '</body>' +
    '</html>'
  ).setWidth(400).setHeight(250);

  SpreadsheetApp.getUi().showSidebar(htmlOutput);
}
