Sub GerarFluxo()
    Dim ws As Worksheet
    Dim ultimaLinha As Long
    Dim linhaAtual As Long
    Dim colunaInicial As Long
    Dim colunaAtual As Long
    Dim valorPrimeiro As Variant
    Dim nomeCliente As String
    Dim corPintura As Long
    Dim valoresDiferentes As Object
    Dim colunaDiferente As Variant
    Dim colunasAdicionais() As Long
    Dim i As Integer
    Dim ultimaColunaComValor As Long
    Dim novaLinhaInserida As Boolean
    Dim limiteHorizontal As Long
    Dim textoEncontrado As Boolean
    Dim celulaIniciar As Range
    Dim contador As Object
    Dim valorCelula As Variant
    Dim todosIguais As Boolean
    Dim valorComparacao As Variant
    Dim nColunasAdicionais As Long
    Dim tempoInicio As Double
    Dim tempoFim As Double
    Dim tempoExecucao As Double
    Dim minutos As Long
    Dim segundos As Double
    Dim linhaOriginalAtualizada As Object
    Dim variacao As Double
    Dim primeiraCelulaVazia As Boolean
    Dim encontrouZero As Boolean
    Dim limiteColunaAnalise As Long
    Dim linha As Variant

    Application.DisplayAlerts = False
    Set ws = ActiveSheet
    corPintura = RGB(255, 255, 0)
    Set contador = CreateObject("Scripting.Dictionary")
    Set linhaOriginalAtualizada = CreateObject("Scripting.Dictionary")
    
    nColunasAdicionais = 121
    ReDim colunasAdicionais(1 To nColunasAdicionais)
    For i = 1 To nColunasAdicionais
        colunasAdicionais(i) = i + 1
    Next i
    
    limiteHorizontal = ws.Columns.Count
    variacao = 700
    tempoInicio = Timer

    Set celulaIniciar = ws.Cells.Find(What:="INICIAR", LookIn:=xlValues, LookAt:=xlWhole)
    
    If celulaIniciar Is Nothing Then
        MsgBox "Texto 'INICIAR' não encontrado na planilha.", vbExclamation, "Erro"
        Application.DisplayAlerts = True
        Exit Sub
    End If

    colunaInicial = celulaIniciar.Column
    linhaAtual = celulaIniciar.Row + 2
    textoEncontrado = False

    ultimaLinha = ws.Cells(ws.Rows.Count, colunaInicial).End(xlUp).Row

    Do While linhaAtual <= ultimaLinha
        If ws.Rows(linhaAtual).Hidden Then
            linhaAtual = linhaAtual + 1
            GoTo ProximaLinha
        End If

        valorPrimeiro = ws.Cells(linhaAtual, colunaInicial).Value

        If VarType(valorPrimeiro) = vbString And UCase(Trim(valorPrimeiro)) = "PARAR" Then
            limiteHorizontal = ws.Cells(linhaAtual, ws.Columns.Count).End(xlToLeft).Column
            textoEncontrado = True
            Exit Do
        End If

        If IsNumeric(valorPrimeiro) And CDbl(valorPrimeiro) = 0 Then
            linhaAtual = linhaAtual + 1
            GoTo ProximaLinha
        End If

        nomeCliente = CStr(ws.Cells(linhaAtual, 1).Value)
        Set valoresDiferentes = CreateObject("Scripting.Dictionary")
        ultimaColunaComValor = colunaInicial
        todosIguais = True
        valorComparacao = ws.Cells(linhaAtual, colunaInicial).Value
        primeiraCelulaVazia = False
        encontrouZero = False
        limiteColunaAnalise = limiteHorizontal
        
        For colunaAtual = colunaInicial To limiteHorizontal
            valorCelula = ws.Cells(linhaAtual, colunaAtual).Value

            If IsEmpty(valorCelula) Or valorCelula = "" Then
                primeiraCelulaVazia = True
                Exit For
            End If

            If IsNumeric(valorCelula) Then
                If CDbl(valorCelula) = 0 Then
                    encontrouZero = True
                    limiteColunaAnalise = colunaAtual - 1 ' Definir a coluna limite para análise
                    Exit For
                ElseIf IsNumeric(valorComparacao) And _
                    (CDbl(valorCelula) >= CDbl(valorComparacao) - variacao And _
                    CDbl(valorCelula) <= CDbl(valorComparacao) + variacao) Then
                    ' Ignorar valores dentro da faixa de variação
                Else
                    ' Considerar valores diferentes e adicionar ao dicionário
                    If CDbl(valorCelula) <> CDbl(valorComparacao) Then
                        todosIguais = False
                        Dim valorDiferenca As Double
                        valorDiferenca = CDbl(valorCelula) - CDbl(valorComparacao)
                        If Not valoresDiferentes.Exists(colunaAtual) Then
                            valoresDiferentes.Add colunaAtual, valorDiferenca
                        End If
                    End If
                End If
            End If
        Next colunaAtual

        If Not todosIguais Then
            novaLinhaInserida = True
            ws.Rows(linhaAtual + 1).Insert Shift:=xlDown

            ' Copiar valores diferentes para a nova linha
            For Each colunaDiferente In valoresDiferentes.Keys
                ws.Cells(linhaAtual + 1, colunaDiferente).Value = valoresDiferentes(colunaDiferente)
                ws.Cells(linhaAtual + 1, colunaDiferente).Interior.Color = corPintura
            Next colunaDiferente

            ' Copiar valores após o 0 para a nova linha e apagar da célula original
            For colunaAtual = limiteColunaAnalise + 1 To limiteHorizontal
                If Not IsEmpty(ws.Cells(linhaAtual, colunaAtual).Value) Then
                    ws.Cells(linhaAtual + 1, colunaAtual).Value = ws.Cells(linhaAtual, colunaAtual).Value
                    ws.Cells(linhaAtual, colunaAtual).ClearContents  ' Limpa o valor da célula original
                End If
            Next colunaAtual

            ' Atualiza o nome do cliente na nova linha
            If contador.Exists(nomeCliente) Then
                contador(nomeCliente) = contador(nomeCliente) + 1
            Else
                contador.Add nomeCliente, 1
            End If
            ws.Cells(linhaAtual + 1, 1).Value = nomeCliente & "_" & contador(nomeCliente)

            ' Copiar fórmulas e colar especial
            For i = LBound(colunasAdicionais) To UBound(colunasAdicionais)
                ws.Cells(linhaAtual, colunasAdicionais(i)).Copy
                ws.Cells(linhaAtual + 1, colunasAdicionais(i)).PasteSpecial Paste:=xlPasteFormulas
                ws.Cells(linhaAtual + 1, colunasAdicionais(i)).Interior.Color = _
                    ws.Cells(linhaAtual, colunasAdicionais(i)).Interior.Color
            Next i

            ' Limpar a área de transferência
            Application.CutCopyMode = False

            ' Garantir que a nova linha não tenha células vazias, preenchendo com 0 se necessário
            For colunaAtual = colunaInicial To ws.Cells(linhaAtual + 1, ws.Columns.Count).End(xlToLeft).Column
                If IsEmpty(ws.Cells(linhaAtual + 1, colunaAtual).Value) Then
                    ws.Cells(linhaAtual + 1, colunaAtual).Value = 0
                End If
            Next colunaAtual

            ' Marcar a linha original como atualizada
            linhaOriginalAtualizada(linhaAtual) = True
            ultimaLinha = ultimaLinha + 1
            linhaAtual = linhaAtual + 1
        Else
            linhaAtual = linhaAtual + 1
        End If

ProximaLinha:
        DoEvents
    Loop

    ' Ajustar as linhas originais
    For Each linha In linhaOriginalAtualizada.Keys
        valorPrimeiro = ws.Cells(linha, colunaInicial).Value
        For colunaAtual = colunaInicial To ws.Cells(linha, ws.Columns.Count).End(xlToLeft).Column
            ' Manter o valor original na linha se estiver dentro da faixa de variação e antes do 0
            If IsNumeric(ws.Cells(linha, colunaAtual).Value) And _
               ws.Cells(linha, colunaAtual).Value <> valorPrimeiro Then
                If ws.Cells(linha, colunaAtual).Value <> 0 And colunaAtual <= limiteColunaAnalise Then
                    If Not (IsNumeric(valorPrimeiro) And _
                            CDbl(ws.Cells(linha, colunaAtual).Value) >= CDbl(valorPrimeiro) - variacao And _
                            CDbl(ws.Cells(linha, colunaAtual).Value) <= CDbl(valorPrimeiro) + variacao) Then
                        ws.Cells(linha, colunaAtual).Value = valorPrimeiro
                    End If
                End If
            End If
        Next colunaAtual
    Next linha

    Application.DisplayAlerts = True
    tempoFim = Timer
    tempoExecucao = tempoFim - tempoInicio
    minutos = Int(tempoExecucao / 60)
    segundos = tempoExecucao Mod 60

    MsgBox "Fluxo anual e mensal segregado com sucesso!" & vbCrLf & _
           "Tempo de execução: " & minutos & " minuto(s) e " & Format(segundos, "00") & " segundo(s)", _
           vbInformation, "Processo Finalizado"
End Sub
