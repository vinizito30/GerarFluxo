Sub GerarFluxo()
    Dim ws As Worksheet
    Dim ultimaLinha As Long
    Dim linhaAtual As Long
    Dim colunaInicial As Long
    Dim valorPrimeiro As Variant
    Dim nomeCliente As String
    Dim corPintura As Long
    Dim valoresDiferentes As Object
    Dim colunaDiferente As Variant
    Dim colunasAdicionais() As Long
    Dim i As Integer
    Dim ultimaColunaComValor As Long
    Dim novaLinhaInserida As Boolean
    Dim limiteHorizontal As Long
    Dim textoEncontrado As Boolean
    Dim celulaIniciar As Range
    Dim celulaParar As Range
    Dim contador As Object
    Dim valorCelula As Variant
    Dim todosIguais As Boolean
    Dim valorComparacao As Variant
    Dim nColunasAdicionais As Long
    Dim tempoInicio As Double
    Dim tempoFim As Double
    Dim tempoExecucao As Double
    Dim minutos As Long
    Dim segundos As Double
    Dim linhaOriginalAtualizada As Object
    Dim variacao As Double
    Dim primeiraCelulaVazia As Boolean
    Dim encontrouZero As Boolean
    Dim encontrouNegrito As Boolean
    Dim limiteColunaAnalise As Long
    Dim ultimaColunaPreenchida As Long
    Dim ultimaColunaNovaLinha As Long
    Dim linha As Variant
    Dim dados As Variant
    Dim dadosNovaLinha As Variant
    Dim ultimaCelulaComValorRelevante As Long
    Dim celulaTexto As Range
    Dim ultimaLinhaPreenchida As Long
    Dim contagemLinhasInseridas As Long
    Dim linhaParaRegistro As Long

    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    Application.DisplayAlerts = False
    
    Set ws = ActiveSheet
    corPintura = RGB(255, 255, 0)
    Set contador = CreateObject("Scripting.Dictionary")
    Set linhaOriginalAtualizada = CreateObject("Scripting.Dictionary")
    
    nColunasAdicionais = 121
    ReDim colunasAdicionais(1 To nColunasAdicionais)
    For i = 1 To nColunasAdicionais
        colunasAdicionais(i) = i + 1
    Next i
    
    limiteHorizontal = ws.Columns.Count
    variacao = 100
    tempoInicio = Timer
    
    ' Verificar se o nome "Iniciar" está definido
    On Error Resume Next
    Set celulaIniciar = ws.Range("Iniciar")
    On Error GoTo 0
    
    If celulaIniciar Is Nothing Then
        MsgBox "Nome 'Iniciar' não encontrado na planilha.", vbExclamation, "Erro"
        Application.DisplayAlerts = True
        Application.ScreenUpdating = True
        Application.Calculation = xlCalculationAutomatic
        Exit Sub
    End If
    
    colunaInicial = celulaIniciar.Column
    linhaAtual = celulaIniciar.Row
    textoEncontrado = False
    
    ultimaLinha = ws.Cells(ws.Rows.Count, colunaInicial).End(xlUp).Row
    
    ' Procurar a célula nomeada como "PARAR"
    On Error Resume Next
    Set celulaParar = ws.Range("PARAR")
    On Error GoTo 0
    
    If celulaParar Is Nothing Then
        MsgBox "Nome 'PARAR' não encontrado na planilha.", vbExclamation, "Erro"
        Application.DisplayAlerts = True
        Application.ScreenUpdating = True
        Application.Calculation = xlCalculationAutomatic
        Exit Sub
    End If
    
    ' Encontrar a linha da célula "PARAR"
    ultimaLinha = celulaParar.Row - 1
    
    ' Inicializar a contagem de linhas inseridas
    contagemLinhasInseridas = 0
    
    Do While linhaAtual <= ultimaLinha
        If ws.Rows(linhaAtual).Hidden Then
            linhaAtual = linhaAtual + 1
            GoTo ProximaLinha
        End If
        
        valorPrimeiro = ws.Cells(linhaAtual, colunaInicial).Value
        
        If VarType(valorPrimeiro) = vbString And UCase(Trim(valorPrimeiro)) = "PARAR" Then
            limiteHorizontal = ws.Cells(linhaAtual, ws.Columns.Count).End(xlToLeft).Column
            textoEncontrado = True
            Exit Do
        End If
        
        If IsNumeric(valorPrimeiro) And CDbl(valorPrimeiro) = 0 Then
            linhaAtual = linhaAtual + 1
            GoTo ProximaLinha
        End If
        
        nomeCliente = CStr(ws.Cells(linhaAtual, 1).Value)
        Set valoresDiferentes = CreateObject("Scripting.Dictionary")
        ultimaColunaComValor = colunaInicial
        todosIguais = True
        valorComparacao = ws.Cells(linhaAtual, colunaInicial).Value
        primeiraCelulaVazia = False
        encontrouZero = False
        encontrouNegrito = False
        limiteColunaAnalise = limiteHorizontal
        ultimaCelulaComValorRelevante = 0
        
        ' Ler dados da linha atual em um array
        dados = ws.Range(ws.Cells(linhaAtual, colunaInicial), ws.Cells(linhaAtual, limiteHorizontal)).Value
        
        For colunaAtual = colunaInicial To limiteHorizontal
            valorCelula = dados(1, colunaAtual - colunaInicial + 1)
            
            If IsEmpty(valorCelula) Or valorCelula = "" Then
                primeiraCelulaVazia = True
                Exit For
            End If
            
            If IsNumeric(valorCelula) Then
                If CDbl(valorCelula) = 0 Then
                    encontrouZero = True
                    limiteColunaAnalise = colunaAtual - 1 ' Definir a coluna limite para análise
                    Exit For
                ElseIf IsNumeric(valorComparacao) And _
                    (CDbl(valorCelula) >= CDbl(valorComparacao) - variacao And _
                    CDbl(valorCelula) <= CDbl(valorComparacao) + variacao) Then
                    ' Ignorar valores dentro da faixa de variação
                Else
                    ' Considerar valores diferentes e adicionar ao dicionário
                    If CDbl(valorCelula) <> CDbl(valorComparacao) Then
                        todosIguais = False
                        Dim valorDiferenca As Double
                        valorDiferenca = CDbl(valorCelula) - CDbl(valorComparacao)
                        If Not valoresDiferentes.Exists(colunaAtual) Then
                            valoresDiferentes.Add colunaAtual, valorDiferenca
                        End If
                    End If
                End If
            End If
            
            ' Verificar se o valor da célula está em negrito
            If ws.Cells(linhaAtual, colunaAtual).Font.Bold Then
                encontrouNegrito = True
                limiteColunaAnalise = colunaAtual - 1 ' Definir a coluna limite para análise
                Exit For
            End If
            
            If Not IsEmpty(ws.Cells(linhaAtual, colunaAtual)) Then
                ultimaCelulaComValorRelevante = colunaAtual
            End If
            
        Next colunaAtual
        
        If Not todosIguais Or encontrouZero Or encontrouNegrito Then
            novaLinhaInserida = True
            ws.Rows(linhaAtual + 1).Insert Shift:=xlDown
            
            ' Copiar valores diferentes para a nova linha
            For Each colunaDiferente In valoresDiferentes.Keys
                ws.Cells(linhaAtual + 1, colunaDiferente).Value = valoresDiferentes(colunaDiferente)
                ws.Cells(linhaAtual + 1, colunaDiferente).Interior.Color = corPintura
            Next colunaDiferente
            
            ' Ler dados da linha original em um array
            dadosNovaLinha = ws.Range(ws.Cells(linhaAtual, colunaInicial), ws.Cells(linhaAtual, limiteHorizontal)).Value
            
            ' Copiar valores após o 0 ou valores em negrito para a nova linha e deixar a célula original em branco
            ultimaColunaPreenchida = limiteColunaAnalise ' Identifica a última coluna com valor relevante
            For colunaAtual = limiteColunaAnalise + 1 To limiteHorizontal
                If Not IsEmpty(dadosNovaLinha(1, colunaAtual - colunaInicial + 1)) Then
                    ' Copia o valor para a nova linha e deixa a célula original em branco, incluindo zeros
                    ws.Cells(linhaAtual + 1, colunaAtual).Value = ws.Cells(linhaAtual, colunaAtual).Value
                    ws.Cells(linhaAtual, colunaAtual).ClearContents
                End If
            Next colunaAtual
            
            ' Atualizar as células originais com o valor da célula de referência
            ' Apenas se não for negrito
            For colunaAtual = colunaInicial To limiteHorizontal
                If valoresDiferentes.Exists(colunaAtual) And Not ws.Cells(linhaAtual, colunaAtual).Font.Bold Then
                    ws.Cells(linhaAtual, colunaAtual).Value = valorComparacao
                End If
            Next colunaAtual
            
            ' Atualiza o nome do cliente na nova linha
            If contador.Exists(nomeCliente) Then
                contador(nomeCliente) = contador(nomeCliente) + 1
            Else
                contador.Add nomeCliente, 1
            End If
            ws.Cells(linhaAtual + 1, 1).Value = nomeCliente & "_" & contador(nomeCliente)
            
            ' Copiar fórmulas e colar especial
            For i = LBound(colunasAdicionais) To UBound(colunasAdicionais)
                ws.Cells(linhaAtual, colunasAdicionais(i)).Copy
                ws.Cells(linhaAtual + 1, colunasAdicionais(i)).PasteSpecial Paste:=xlPasteFormulas
                ws.Cells(linhaAtual + 1, colunasAdicionais(i)).PasteSpecial Paste:=xlPasteFormats
            Next i
            
            ' Garantir que a nova linha não tenha células vazias, preenchendo com 0 se necessário
            ultimaColunaNovaLinha = ws.Cells(linhaAtual + 1, ws.Columns.Count).End(xlToLeft).Column
            For colunaAtual = colunaInicial To ultimaColunaNovaLinha
                If IsEmpty(ws.Cells(linhaAtual + 1, colunaAtual).Value) Then
                    ' Só inserir 0 se a coluna estiver antes da última célula com valor relevante
                    If colunaAtual <= ultimaCelulaComValorRelevante Then
                        ws.Cells(linhaAtual + 1, colunaAtual).Value = 0
                    End If
                End If
            Next colunaAtual
            
            ' Marcar a linha original como atualizada
            linhaOriginalAtualizada(linhaAtual) = True
            ultimaLinha = ultimaLinha + 1
            linhaAtual = linhaAtual + 1
            
            ' Incrementar a contagem de linhas inseridas
            contagemLinhasInseridas = contagemLinhasInseridas + 1
        Else
            linhaAtual = linhaAtual + 1
        End If
        
ProximaLinha:
        DoEvents
    Loop
    
    ' Registrar a contagem de linhas inseridas para "Data Base Cessão"
    Set celulaTexto = ws.Cells.Find(What:="Data Base Cessão", LookIn:=xlValues, LookAt:=xlWhole)
    
    If Not celulaTexto Is Nothing Then
        ultimaLinhaPreenchida = ws.Cells(ws.Rows.Count, celulaTexto.Column).End(xlUp).Row
        linhaParaRegistro = ultimaLinhaPreenchida + 1
        
        For i = 1 To contagemLinhasInseridas
            ws.Cells(linhaParaRegistro, celulaTexto.Column).Value = i
            linhaParaRegistro = linhaParaRegistro + 1
        Next i
        
        Application.CutCopyMode = False
    End If
    
    tempoFim = Timer
    tempoExecucao = tempoFim - tempoInicio
    minutos = Int(tempoExecucao / 60)
    segundos = Round(tempoExecucao - minutos * 60, 2)
    
    MsgBox "Fluxo anual e mensal segregado com sucesso!" & vbCrLf & _
           "Tempo de execução: " & minutos & " minuto(s) e " & Format(segundos, "00") & " segundo(s)", _
           vbInformation, "Processo Finalizado"
           
    Application.DisplayAlerts = True
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
    
    ' Chamar a sub Atualizar após o término de GerarFluxo
    Atualizar
End Sub

Private Sub Atualizar()
    Dim ws As Worksheet
    Dim rngData As Range
    Dim rngVcto As Range
    Dim rngTotal As Range
    Dim ultimaLinhaData As Long
    Dim ultimaColunaData As Long
    Dim ultimaLinhaVcto As Long
    Dim linhaInicialData As Long
    Dim linhaInicialVcto As Long
    Dim ultimaCelulaPreenchidaLinha As Long
    Dim linhaAntesTotal As Long
    Dim totalLinha As Long
    Dim cell As Range
    Dim foundTotal As Boolean

    ' Definir a planilha ativa
    Set ws = ActiveSheet

    ' Buscar a célula com o nome definido "Data"
    On Error Resume Next
    Set rngData = ws.Range("Data")
    On Error GoTo 0

    If Not rngData Is Nothing Then
        ' Obter a linha e coluna da célula encontrada
        linhaInicialData = rngData.Row + 1
        ultimaColunaData = ws.Cells(linhaInicialData, ws.Columns.Count).End(xlToLeft).Column

        ' Obter a última linha preenchida na coluna da palavra encontrada
        ultimaLinhaData = ws.Cells(ws.Rows.Count, rngData.Column).End(xlUp).Row

        ' Selecionar a célula abaixo da célula com o nome "Data" e arrastar a fórmula até a última linha preenchida
        ws.Range(ws.Cells(linhaInicialData, rngData.Column), ws.Cells(linhaInicialData, ultimaColunaData)).AutoFill _
            Destination:=ws.Range(ws.Cells(linhaInicialData, rngData.Column), ws.Cells(ultimaLinhaData, ultimaColunaData))
    Else
        MsgBox "Nome 'Data' não encontrado.", vbExclamation
    End If

    ' Buscar a célula com o nome definido "vcto"
    On Error Resume Next
    Set rngVcto = ws.Range("vcto")
    On Error GoTo 0

    If Not rngVcto Is Nothing Then
        ' Obter a linha e coluna da célula encontrada
        linhaInicialVcto = rngVcto.Row + 1
        ultimaCelulaPreenchidaLinha = ws.Cells(linhaInicialVcto, ws.Columns.Count).End(xlToLeft).Column

        ' Inicializar variáveis para procurar "TOTAL"
        totalLinha = ws.Rows.Count
        foundTotal = False

        ' Buscar a célula com o nome definido "Total"
        On Error Resume Next
        Set rngTotal = ws.Range("Total")
        On Error GoTo 0

        If Not rngTotal Is Nothing Then
            totalLinha = rngTotal.Row - 1 ' Linha antes da célula com "Total"

            ' Selecionar a célula abaixo da célula com o nome "vcto" e arrastar a fórmula até a linha antes da célula com "Total"
            ws.Range(ws.Cells(linhaInicialVcto, rngVcto.Column), ws.Cells(linhaInicialVcto, ultimaCelulaPreenchidaLinha)).AutoFill _
                Destination:=ws.Range(ws.Cells(linhaInicialVcto, rngVcto.Column), ws.Cells(totalLinha, ultimaCelulaPreenchidaLinha))
        Else
            MsgBox "Nome 'Total' não encontrado.", vbExclamation
        End If
    Else
        MsgBox "Nome 'vcto' não encontrado.", vbExclamation
    End If
End Sub


